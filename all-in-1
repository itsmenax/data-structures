DATA STRUCTURE 
- way to store and organize data in computer so it can be used more efficiently 

-mathematical/logical models - abstract data type (ADT)
    - define data and operations but no implementation
         
    - arrays 
        - similar to vector, we must declare size n beforehand
        
       #create an array of integers 0 and the size would be n max
        self.a=array.array('i',[0]*nmax)
        
    - linked list
        - a structured of chained nodes, each element of a list is a node
        
    - hashtable
        
    - stack 
        - designed to temporarily store data
        - LIFO 
        
        - implementation using array 
            - push would be equivalent to the adding information to the end of the array 
            - pop would be equivalent to the deleting the last element the an array
            
import array
class MyStack: #creating an object
    def __init__(self,nmax): #defining it, constructer
        self.nmax=nmax
        self.n = 0
        #create an array of integers 0 and the size would be n max
        self.a=array.array('i',[0]*nmax)

    def push(self, x): #appending
        if self.n < self.nmax: #checking whether i have space
            self.a[self.n] = x #ill be adding the next number, from left to right
            self.n =+ 1
            return x
        else:
            print("ERROR")
    def pop (self): #it returns the value that was recently added (from right to left)
        if self.n == 0:
            print("ERROR")
        else:
            self.n -= 1
            return self.a[self.n]
            
        
        - implementation using linked list
            - push would be equivalent to the adding element to the beginning
            - pop would be equivalent to the deleting of the element at the beginning
            
class Node:
    # class of node would create a node with some value and its pointing to none
    def __init__(self, dataval=None):
        self.dataval = dataval
        self.nextval = None

class LinkedList: #no arguments, it just creates a pointer that points to none
    def __init__(self):
        self.head = None
    #if we add push its going to be a five point to none
    #if we add another number its going become the head and go before 5

    def push(self,x):
        node=Node(x)
        node.nextval=self.head #its connecting like a node, or else wed lose the first value when adding an anoother
        self.head=node

    def pop(self):
        #checking if there are any nodes to begin with
        if self.head is None:
            print ('error')
        else:
            node = self.head #saving the variable
            self.head = self.head.nextval #its pointing to the next value of selfhead
            return node.dataval

    #you have a stack and you want to print every value of the stack, starting with head
    def listprint(self):
        node = self.head
        while node is not None:
            print(node.dataval)
            node = node.nextval

    def search(self,x):
        node=self.head
        while node is not Node:
            if node.dataval==x:
                return print('found')
            else:
                node = node.nextval
        return print('not found')
        
        
    - queue 
        - in practice, it is used when we want to balance the speeds of two data streams
        - FIFO
        
        - implementation using array 
            - push would be equivalent to the adding information to the end of the array 
            - pop would be equivalent to the deleting of the first available element the an array
              
            - cyclic queue array - keeping the track of the size nmax, number of elements, indices of the head and tail
                          - if the limit is exceeded, then the value is stored in the beginning of the array
          
    class MyQueue:
    def __init__(self, nmax):
        self.nmax = nmax
        self.n = 0
        self.head = 0
        self.tail = -1
        self.a = array.array('i',[0]*nmax)
        
    def push(self, x):
        if self.n < self.nmax:
            if self.tail + 1 < self.nmax: #tail is at the end of an array
                self.tail = self.tail + 1
            else:
                self.tail = 0
            self.n = self.n + 1
            self.a[self.tail] = x
        else: #(if self.n==self.nmax)
            print("error")

    def pop(self):
        if self.n == 0: #we gotta check that the head is there
            print("error")
        else: #if self.n>0
            temp = self.a[self.head] #this is the value i want to return, were returning this value
            #were saving the value of the head since were gonna move w it
            if self.head + 1 < self.nmax:
                self.head = self.tail + 1
            else:
                self.head = 0
            self.n = self.n -1
            return temp
                          
        - implementation using linked list
            - push would be equivalent to the adding element to the end of the linked list
            - pop would be equivalent to the the deleting of the element at the beginning.
            
            two pointers
            1. head pointing to the beginning,
            2. tail pointing to the last element.
            
 class Node:
    def __init__(self, dataval=None):
        self.dataval = dataval
        self.nextval = None

class QueueLinked:
    def __init__(self):
        self.head = None
        self.tail = None

    def push(self,x):
        node=Node(x)
        if self.tail is None: #if tail is none then the head is also pointing to none
            self.head = node
        else:
            self.tail.nextval = node
        self.tail = node #setting tail to the newly created node

    def pop(self): #FIFO, extracting the value from the head
        if self.head is None:
            print("error")
        else:
            temp=self.head    #1 save head to some temporary variable
            self.head=self.head.nextval     #2 saving head to head.nextval, reassign the head point
            if self.head is None: #because even if head is pointing to none tail is sitll attached to the value
                self.tail=None
            return temp     #3 return the temp value
            #we can also return temp.dataval
            
            
        - heap 
            - tree, its parent must be always lower than the children
            - every level must be filled from left to right
            indices of parent if the child is i:       (i-1)//2
            indices of child if the parent is i:       2i + 1 and 2i + 2
            
            - implementation using array
            
class MyHeap:
    def __init__(self, nmax, n = 0):
        self.nmax = nmax
        self.n = n
        self.a = array.array('i',[0]*nmax) #were calling the package of array, because its in a single module
    def push(self, x): #were just filling it from left to right
        #will the value fit into my predefined array?
        if self.n ==self.nmax:
            print("error")
        else:
            self.a[self.n]=x
            i = self.n
            self.n +=1
            # next step is comparing the child and the parent whether theyre correct, if not switch
            while self.a[i] < self.a[(i-1)//2] and i>0:
                self.a[i] = self.a[(i-1)//2]
                self.a[(i-1)//2] = self.a[i] #swapping
                i= (i-1)//2

    def pop(self): #removes the root and moves the most right lowest and starts comparing
        if self.n==0:
            print("error")
        else:
            temp=self.a[0]
            self.n -=1
            self.a[0]=self.a[self.n]
            i=0
            flag=0
            while i <= self.n -1 and flag ==0:
                left = 2*i+1
                right = 2*i+2
                imin=i
                if left < self.n and self.a[left] < self.a[imin]:
                    imin = left
                if right < self.n and self.a[right] < self.a[imin]:
                    imin = right
                if imin != i:
                    self.a[i], self.a[imin] = self.a[imin], self.a[i]
                else:
                    flag = 1 #its gonna break the loop of swapping, cuz its in the right position
            return temp
            



        

   
